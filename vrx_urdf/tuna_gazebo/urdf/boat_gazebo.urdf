<?xml version="1.0"?>
<robot name="tuna">

  <!-- Base link with your boat mesh -->
  <link name="base_link">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/> <!-- LOWERED CENTER OF MASS -->
      <mass value="3.0"/>
      <inertia ixx="0.2" iyy="0.2" izz="0.2" ixy="0" ixz="0" iyz="0"/>
    </inertial>

    <!-- Your boat visual mesh -->
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://tuna_gazebo/meshes/boat.dae"/>
      </geometry>
    </visual>
  </link>




  <!-- Left propeller with mesh -->
  <link name="prop_left">
    <inertial>
      <!-- origin xyz="0 0 0" rpy="0 0 0"/ -->
      <origin xyz="0 0 0" rpy="1.52 0 0" />
      <mass value="1.0"/>
      <inertia ixx="0.0001" iyy="0.0001" izz="0.0001" ixy="0" ixz="0" iyz="0"/>
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>

      <geometry>
        <mesh filename="package://tuna_gazebo/meshes/prop_left.dae"/>
      </geometry>

    </visual>
  </link>

  <!-- Right propeller with mesh -->
  <link name="prop_right">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="1.0"/>
      <inertia ixx="0.0001" iyy="0.0001" izz="0.0001" ixy="0" ixz="0" iyz="0"/>
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>

      <geometry>
        <mesh filename="package://tuna_gazebo/meshes/prop_right.dae"/>
      </geometry>

    </visual>
  </link>

  <!-- Joints -->



  <joint name="base_to_prop_right" type="continuous">
    <parent link="base_link"/>
    <child link="prop_right"/>
    <origin xyz="-0.14 -0.018 -0.043" rpy="0 -0.19 0"/>
    <axis xyz="1 0 0"/>
  </joint>

  <joint name="base_to_prop_left" type="continuous">
    <parent link="base_link"/>
    <child link="prop_left"/>
    <origin xyz="-0.14 0.018 -0.043" rpy="0 -0.19 0"/>
    <axis xyz="1 0 0"/>
  </joint>


  <!-- ADD WAVE CONTROL PARAMETERS -->
  <gazebo>
    <plugin filename="libWavefieldVisualPlugin.so" name="wavefield_visual">
      <static>false</static>
      <update_rate>30</update_rate>
      <size>1000 1000</size>
      <cell_count>50 50</cell_count>
      
      <!-- LOWER WAVE PARAMETERS -->
      <wave>
        <model>PMS</model>
        <period>20.0</period>      <!-- Longer period = gentler waves -->
        <amplitude>0.00</amplitude><!-- Lower amplitude = smaller waves -->
        <number>3</number>
        <scale>1.5</scale>
        <gain>0.5</gain>          <!-- Lower gain = calmer waves -->
        <direction>1 0</direction>
        <angle>0.4</angle>
        <tau>2.0</tau>
        <amplitude_rate>0.01</amplitude_rate>
      </wave>
    </plugin>
  </gazebo>

  <!-- === TF === -->
  <!-- Publish robot state information -->
  <gazebo>
    <plugin filename="libgz-sim-pose-publisher-system.so"
      name="gz::sim::systems::PosePublisher">
      <publish_link_pose>false</publish_link_pose>
      <publish_sensor_pose>true</publish_sensor_pose>
      <publish_collision_pose>false</publish_collision_pose>
      <publish_visual_pose>false</publish_visual_pose>
      <publish_nested_model_pose>false</publish_nested_model_pose>
      <publish_model_pose>false</publish_model_pose>
      <use_pose_vector_msg>true</use_pose_vector_msg>
      <static_publisher>false</static_publisher>
      <static_update_frequency>1</static_update_frequency>
    </plugin>

    <plugin
      filename="gz-sim-joint-state-publisher-system"
      name="gz::sim::systems::JointStatePublisher">
    </plugin>
  </gazebo>
  <!-- ros2_control name="MobileBaseHardwareInterface" type="system">
        <hardware>
          <plugin>gz_ros2_control/GazeboSimSystem</plugin>
        </hardware>
        <joint name="base_to_prop_right">
            <command_interface name="velocity" />
            <state_interface name="position" />
            <state_interface name="velocity" />
        </joint>
        <joint name="base_to_prop_left">
            <command_interface name="velocity" />
            <state_interface name="position" />
            <state_interface name="velocity" />
        </joint>
  </ros2_control>
  <gazebo>
      <plugin filename="gz_ros2_control-system" name="gz_ros2_control::GazeboSimROS2ControlPlugin">
          <parameters>/home/peerajak/ros2_vrx_ws/install/share/tuna_gazebo/config/tuna_controllers.yaml</parameters>
          <ros>
            <namespace>/tuna</namespace>
          </ros>
          <controller_manager_node_name>controller_manager</controller_manager_node_name>
      </plugin>
  </gazebo  -->

  <gazebo>
    <plugin filename="gz-sim-detachable-joint-system" name="gz::sim::systems::DetachableJoint">
      <parent_link>base_link</parent_link>  <!-- Your boat's base link -->
      <child_model>platform</child_model>         <!-- The world model to anchor to -->
      <child_link>dummy_upper</child_link>        <!-- A dummy link in the world model -->
      <topic>/vrx/release</topic>                 <!-- Topic to publish to for release -->
      <suppress_child_warning>true</suppress_child_warning>
    </plugin>
  </gazebo>

  <gazebo>
    <plugin filename="gz-sim-thruster-system" name="gz::sim::systems::Thruster">
    <joint_name>base_to_prop_right</joint_name>
    <thrust_coefficient>0.9</thrust_coefficient>
    <fluid_density>1000</fluid_density>
    <propeller_diameter>0.2</propeller_diameter>
    <velocity_control>true</velocity_control>
    <max_thrust_cmd>20</max_thrust_cmd>
    <namespace>tuna</namespace>
    <topic>thrusters/tuna_right/thrust</topic>   
    <name>tuna_right</name>
  </plugin>
    <plugin filename="gz-sim-thruster-system" name="gz::sim::systems::Thruster">
      <joint_name>base_to_prop_left</joint_name>
      <thrust_coefficient>0.9</thrust_coefficient>
      <fluid_density>1000</fluid_density>
      <propeller_diameter>0.2</propeller_diameter>
      <velocity_control>true</velocity_control>
      <max_thrust_cmd>20</max_thrust_cmd>
      <namespace>tuna</namespace>
      <topic>thrusters/tuna_left/thrust</topic>
      <name>tuna_left</name>
    </plugin>
  </gazebo>


    <!--Gazebo Plugin for simulating WAM-V dynamics-->
    <gazebo>
    <plugin filename="libSurface.so" name="vrx::Surface">
      <link_name>base_link</link_name>
      <hull_length>2.0</hull_length>
      <hull_radius>0.25</hull_radius>
      <fluid_level>0.05</fluid_level>
      <points>
        <point>1.0 0.25 0</point>
        <point>1.0 -0.25 0</point>
        <point>-1.0 0.25 0</point>
        <point>-1.0 -0.25 0</point>
      </points>
      <wavefield>
        <topic>/vrx/wavefield/parameters</topic>
      </wavefield>
    </plugin>
      <plugin
        filename="libSimpleHydrodynamics.so"
        name="vrx::SimpleHydrodynamics">
        <link_name>base_link</link_name>
        <!-- Added mass -->
        <xDotU>0.0</xDotU>
        <yDotV>0.0</yDotV>
        <nDotR>0.0</nDotR>
        <!-- Linear and quadratic drag -->
        <xU>0.0</xU>
        <xUU>0.0</xUU>
        <yV>0.0</yV>
        <yVV>0.0</yVV>
        <zW>0.0</zW>
        <kP>0.0</kP>
        <kPP>0.0</kPP>
        <mQ>0.0</mQ>
        <mQQ>0.0</mQQ>
        <nR>0.0</nR>
        <nRR>0.0</nRR>
      </plugin>

    </gazebo>

</robot>